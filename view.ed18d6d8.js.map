{"mappings":"4vCAAuB,uBACG,iBACF,eA+HxB,IAA2BA,EA5H3BC,QAAQC,IAAAA,gBAERC,OAAOC,MA0HoBJ,EAxH3BK,uBACUC,EAAMH,OAAOI,SAASC,KACtBC,EAAYH,EAAII,QAAQ,SACX,IAAfD,YACUE,MAAM,2CAIdC,EAFON,EAAIO,UAAUJ,EAAY,GAEhBK,MAAM,IAAK,OAC9BC,EACAC,KACoB,GAApBJ,EAAUK,OACVF,EAAU,SACVC,EAAQJ,EAAU,WACS,GAApBA,EAAUK,iBAIPN,MAAM,8BAHhBI,EAAUH,EAAU,GACpBI,EAAQJ,EAAU,SAKhBM,EAAaF,EAAMF,MAAM,IAAK,MACV,IAAtBI,EAAWD,iBACDN,MAAM,oCAEdQ,EAAOD,EAAW,GAClBE,EAASF,EAAW,GAEpBG,EAAAA,EAAaC,UAAUP,GAEvBQ,QAAgBF,EAAIG,cAAcC,YAAYL,OAEhDM,EAAc,WACTC,EAAI,GAAKA,IAAAA,OACRC,EAAQL,EAAQM,UAAAA,iBAA2BF,cAC5B,IAAVC,QAGXF,GAAeI,KAAKF,OAEpBG,EAAkBL,EAClBA,EAAYM,WAAW,aACvBD,EAAkBV,EAAIY,QAAQP,EAAYb,UAAU,WAElDqB,EAAAA,YACIC,EAASZ,EAAQM,UAAAA,2BACnBM,EACOL,KAAKK,GAET,MALLD,OAQFE,EAAa,WACRT,EAAI,GAAKA,IAAAA,OACRC,EAAQL,EAAQM,UAAAA,gBAA0BF,cAC3B,IAAVC,QAGXQ,GAAcN,KAAKF,OAEnBS,EAAiBX,EACjBU,EAAWJ,WAAW,aACtBK,EAAiBhB,EAAIY,QAAQG,EAAWvB,UAAU,WAEhDyB,EAAAA,YACIH,EAASZ,EAAQM,UAAAA,0BACnBM,EACOL,KAAKK,GAET,MALLG,GAQNC,SAASC,eAAe,QAAQC,UAAYtB,QACtCuB,EAAUH,SAASI,cAAc,OACvCD,EAAQE,IAAMb,QACRc,EAAcN,SAASC,eAAe,qBACrCK,EAAYC,YACfD,EAAYE,YAAYF,EAAYC,YAExCD,EAAYG,YAAYN,OAEpBO,EAAAA,mBACmBlB,MAAoBL,QA2D/C,IAAoBwB,EA1DZhB,IACAe,GAAS,cACIf,KAwDDgB,EAtDLD,EAuDIV,SAASC,eAAe,eAChCW,UAAYD,MAtDfE,EAAO,MACQ,KAAfhB,IACAgB,GAAAA,kBAA0Bf,MAAmBD,SAE7CE,IACAc,GAAS,cACId,KAEE,KAAfF,GAAqBA,EAAWJ,WAAW,WAAA,OACrCqB,EAAajB,EAAWvB,UAAU,GAElCyC,SADiBC,KACCC,IAAIH,OACxBI,EAAc,mBACDC,KAASJ,EACtBG,GAAeC,EAAMC,iBAEnBC,EAAcC,KAAKC,MAAML,IA8CvC,SAAwBP,GACLX,SAASC,eAAe,oBAChCW,UAAYD,EA9Cfa,CADMC,GAAkBH,KAAKI,UAAUL,EAAa,KAAM,SAGjD,KAATR,GAqCR,SAAoBF,GACDX,SAASC,eAAe,eAChCW,UAAYD,EAtCfgB,CAAWd,GA0BnB,SAAuBF,GACJX,SAASC,eAAe,UAChCW,UAAYD,EAzBnBiB,CAAAA,sBAC0B9C,EAAI+C,iBAAiBjD,EAAMC,gGACZC,EAAIgD,wBAAwBlD,EAAMC,2GACbC,EAAIiD,YAAYnD,EAAMC,oDAK7Ef,oBAEOL,UACDuE,SAOjB,SAAqBA,GACFhC,SAASC,eAAe,UAChCC,UAAY8B,EAAMZ,WARjBa,CAAYD,EAAMA,OAASA,GACrBA,SA8BdE,EAAW,KACfpE,eAAAkD,WACqB,OAAbkB,IAGJA,QAAWC,EAAeC,UAFfF","sources":["./src/view.js"],"sourcesContent":["import StellarSdk from 'stellar-sdk';\nimport * as ipfsCore from 'ipfs-core';\nimport * as config from './config.js';\n\nconst version = `${process.env.VERSION || \"dev\"}`;\nconsole.log(`Version: ${version}`);\n\nwindow.init = wrapErrorHandling(init);\n\nasync function init() {\n    const url = window.location.href;\n    const hashIndex = url.indexOf(\"#\");\n    if (hashIndex === -1) {\n        throw new Error(\"NFT not specified in web address.\")\n    }\n    const hash = url.substring(hashIndex + 1);\n\n    const hashParts = hash.split(\":\", 2);\n    let network = undefined;\n    let asset = undefined;\n    if (hashParts.length == 1) {\n        network = \"pubnet\";\n        asset = hashParts[0];\n    } else if (hashParts.length == 2) {\n        network = hashParts[0];\n        asset = hashParts[1];\n    } else {\n        throw new Error(\"NFT web address malformed.\")\n    }\n\n    const assetParts = asset.split(\"-\", 2);\n    if (assetParts.length !== 2) {\n        throw new Error(\"NFT web address malformed.\")\n    }\n    const code = assetParts[0];\n    const issuer = assetParts[1];\n\n    const cfg = config.getConfig(network);\n\n    const account = await cfg.horizonServer.loadAccount(issuer);\n\n    let nftAssetUrl = \"\";\n    for (let i = 0; ; i++) {\n        const value = account.data_attr[`nft.asset.url[${i}]`];\n        if (typeof value === \"undefined\") {\n            break;\n        }\n        nftAssetUrl += atob(value);\n    }\n    let nftAssetUrlLink = nftAssetUrl;\n    if (nftAssetUrl.startsWith(\"ipfs://\")) {\n        nftAssetUrlLink = cfg.ipfsUrl(nftAssetUrl.substring(7));\n    }\n    const nftAssetHash = (() => {\n        const sha256 = account.data_attr[`nft.asset.sha256`];\n        if (sha256) {\n            return atob(sha256);\n        }\n        return null;\n    })();\n\n    let nftMetaUrl = \"\";\n    for (let i = 0; ; i++) {\n        const value = account.data_attr[`nft.meta.url[${i}]`];\n        if (typeof value === \"undefined\") {\n            break;\n        }\n        nftMetaUrl += atob(value);\n    }\n    let nftMetaUrlLink = nftAssetUrl;\n    if (nftMetaUrl.startsWith(\"ipfs://\")) {\n        nftMetaUrlLink = cfg.ipfsUrl(nftMetaUrl.substring(7));\n    }\n    const nftMetaHash = (() => {\n        const sha256 = account.data_attr[`nft.meta.sha256`];\n        if (sha256) {\n            return atob(sha256);\n        }\n        return null;\n    })();\n\n    document.getElementById(\"code\").innerText = code;\n    const preview = document.createElement(\"img\");\n    preview.src = nftAssetUrlLink;\n    const filePreview = document.getElementById(\"file-preview\");\n    while (filePreview.firstChild) {\n        filePreview.removeChild(filePreview.firstChild);\n    }\n    filePreview.appendChild(preview);\n\n    let text =\n        `Asset: <a href=\"${nftAssetUrlLink}\">${nftAssetUrl}</a>`;\n    if (nftAssetHash) {\n        text += `<br/>` +\n            `Hash: ${nftAssetHash}`;\n    }\n    resultData(text);\n\n    let meta = \"\";\n    if (nftMetaUrl !== \"\") {\n        meta += `Meta: <a href=\"${nftMetaUrlLink}\">${nftMetaUrl}</a>`;\n    }\n    if (nftMetaHash) {\n        meta += `<br/>` +\n            `Hash: ${nftMetaHash}`;\n    }\n    if (nftMetaUrl !== \"\" && nftMetaUrl.startsWith(\"ipfs://\")) {\n        const nftMetaCid = nftMetaUrl.substring(7);\n        const ipfsNode = await getIpfsNode();\n        const stream = ipfsNode.cat(nftMetaCid);\n        let nftMetaData = \"\";\n        for await (const chunk of stream) {\n            nftMetaData += chunk.toString()\n        }\n        const nftMetaJson = JSON.parse(nftMetaData);\n        const metaJsonHtml = `${JSON.stringify(nftMetaJson, null, \"  \")}`;\n        resultMetaJson(metaJsonHtml);\n    }\n    if (meta !== \"\") {\n        resultMeta(meta);\n    }\n\n    resultSuccess(\n        `View on a <a href=\"${cfg.explorerAssetUrl(code, issuer)}\" target=\"_blank\" rel=\"noopener\">block explorer</a>.</br>` +\n        `See the current owner(s) <a href=\"${cfg.explorerAssetHoldersUrl(code, issuer)}\" target=\"_blank\" rel=\"noopener\">here</a>.</br>` +\n        `Make an offer to buy or sell this NFT using a <a href=\"${cfg.dexAssetUrl(code, issuer)}\" target=\"_blank\" rel=\"noopener\">DEX app</a>.`\n    );\n}\n\nfunction wrapErrorHandling(f) {\n    return async () => {\n        try {\n            await f();\n        } catch (error) {\n            resultError(error.error || error);\n            throw error;\n        }\n    };\n}\n\nfunction resultError(error) {\n    const result = document.getElementById(\"result\");\n    result.innerText = error.toString();\n}\n\nfunction resultSuccess(html) {\n    const result = document.getElementById(\"result\");\n    result.innerHTML = html;\n}\n\nfunction resultData(html) {\n    const result = document.getElementById(\"result-data\");\n    result.innerHTML = html;\n}\n\nfunction resultMeta(html) {\n    const result = document.getElementById(\"result-meta\");\n    result.innerHTML = html;\n}\n\nfunction resultMetaJson(html) {\n    const result = document.getElementById(\"result-meta-json\");\n    result.innerHTML = html;\n}\n\nlet ipfsNode = null;\nasync function getIpfsNode() {\n    if (ipfsNode !== null) {\n        return ipfsNode;\n    }\n    ipfsNode = await ipfsCore.create();\n    return ipfsNode;\n}\n"],"names":["f","console","log","window","init","async","url","location","href","hashIndex","indexOf","Error","hashParts","substring","split","network","asset","length","assetParts","code","issuer","cfg","getConfig","account","horizonServer","loadAccount","nftAssetUrl","i","value","data_attr","atob","nftAssetUrlLink","startsWith","ipfsUrl","nftAssetHash","sha256","nftMetaUrl","nftMetaUrlLink","nftMetaHash","document","getElementById","innerText","preview","createElement","src","filePreview","firstChild","removeChild","appendChild","text","html","innerHTML","meta","nftMetaCid","stream","getIpfsNode","cat","nftMetaData","chunk","toString","nftMetaJson","JSON","parse","resultMetaJson","metaJsonHtml","stringify","resultMeta","resultSuccess","explorerAssetUrl","explorerAssetHoldersUrl","dexAssetUrl","error","resultError","ipfsNode","_ipfsCore","create"],"version":3,"file":"view.ed18d6d8.js.map"}