{"mappings":"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","sources":["./src/index.js","./node_modules/array-buffer-to-hex/index.js","./src/rabet.js"],"sourcesContent":["import StellarSdk from 'stellar-sdk';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport * as ipfsCore from 'ipfs-core';\nimport * as wallet from './rabet.js';\nimport * as config from './config.js';\n\nconst version = `${process.env.VERSION || \"dev\"}`;\nconsole.log(`Version: ${version}`);\n\nfunction getConfig() {\n    const network = document.getElementById(\"network\").value;\n    return config.getConfig(network);\n}\n\nwindow.init = wrapErrorHandling(init);\nwindow.add = wrapErrorHandling(add);\nwindow.create = wrapErrorHandling(create);\nwindow.view = wrapErrorHandling(view);\nwindow.upload = wrapErrorHandling(upload);\n\nfunction wrapErrorHandling(f) {\n    return async () => {\n        try {\n            await f();\n        } catch (error) {\n            resultError(error.error || error);\n            document.getElementById(\"create-button\").removeAttribute(\"disabled\");\n            document.getElementById(\"view-button\").removeAttribute(\"disabled\");\n            throw error;\n        }\n    };\n}\n\nfunction resultReset() {\n    const result = document.getElementById(\"result\");\n    result.innerText = \"\";\n    result.classList.add(\"d-none\");\n}\n\nfunction resultError(error) {\n    const result = document.getElementById(\"result\");\n    result.innerText = error.toString();\n    result.classList.remove(\"d-none\");\n    result.classList.remove(\"alert-success\");\n    result.classList.add(\"alert-danger\");\n}\n\nfunction resultSuccess(html) {\n    const result = document.getElementById(\"result\");\n    result.innerHTML = html;\n    result.classList.remove(\"d-none\");\n    result.classList.remove(\"alert-danger\");\n    result.classList.add(\"alert-success\");\n}\n\nasync function init() {\n    const walletButton = document.getElementById(\"wallet-button\");\n    if (wallet.isConnected()) {\n        walletButton.classList.add(\"d-none\");\n        document.getElementById(\"create-button\").classList.add(\"d-block\");\n        document.getElementById(\"view-button\").classList.add(\"d-block\");\n    } else {\n        walletButton.innerText = \"Add the Rabet extension to Chrome\";\n        window.setTimeout(init, 500);\n    }\n}\n\nasync function add() {\n    init();\n    if (!wallet.isConnected()) {\n        window.open(\"https://rabet.io\", \"_blank\", \"noopener\");\n    }\n}\n\nasync function create() {\n    resultReset();\n    document.getElementById(\"create-button\").setAttribute(\"disabled\", \"disabled\");\n    document.getElementById(\"view-button\").setAttribute(\"disabled\", \"disabled\");\n\n    const { code, issuer, xdr } = await build();\n    const signedXdr = await wallet.signTransaction(xdr, getConfig().network);\n    console.log(`Transaction signed: ${signedXdr}`);\n    const signedTransaction = StellarSdk.TransactionBuilder.fromXDR(signedXdr, getConfig().networkPassphrase);\n    const result = await getConfig().horizonServer.submitTransaction(signedTransaction);\n    console.log(result);\n    resultSuccess(`ðŸŽ‰ View your NFT <a href=\"${getConfig().viewUrl(code, issuer)}\">here</a>.`);\n\n    document.getElementById(\"create-button\").removeAttribute(\"disabled\");\n    document.getElementById(\"view-button\").removeAttribute(\"disabled\");\n}\n\nasync function view() {\n    resultReset();\n    document.getElementById(\"create-button\").setAttribute(\"disabled\", \"disabled\");\n    document.getElementById(\"view-button\").setAttribute(\"disabled\", \"disabled\");\n\n    const { xdr } = await build();\n    const url = `https://laboratory.stellar.org/#xdr-viewer?type=TransactionEnvelope&input=${encodeURIComponent(xdr)}`;\n    window.open(url, \"_blank\", \"noopener\");\n\n    document.getElementById(\"create-button\").removeAttribute(\"disabled\");\n    document.getElementById(\"view-button\").removeAttribute(\"disabled\");\n}\n\nlet ipfsNode = null;\nasync function getIpfsNode() {\n    if (ipfsNode !== null) {\n        return ipfsNode;\n    }\n    ipfsNode = await ipfsCore.create();\n    return ipfsNode;\n}\n\nasync function build() {\n    const code = document.getElementById(\"code\").value;\n    const quantity = document.getElementById(\"quantity\").value;\n    const fileUpload = document.getElementById(\"file-upload\");\n    const description = document.getElementById(\"description\").value;\n\n    let nftAssetUrlParts = [];\n    let nftAssetHash = null;\n    if (fileUpload.files.length > 0) {\n        const file = fileUpload.files[0];\n        const buffer = await new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.onerror = (error) => reject(error);\n            reader.readAsArrayBuffer(file);\n        });\n        const ipfsNode = await getIpfsNode();\n        const { cid } = await ipfsNode.add(buffer)\n        const url = `ipfs://${cid.string}`;\n        nftAssetUrlParts = url.match(/.{1,64}/g);\n        nftAssetHash = await crypto.subtle.digest(\"SHA-256\", buffer);\n    }\n\n    let nftMetaUrlParts = null;\n    let nftMetaHash = null;\n    if (description.length > 0) {\n        const meta = {\n            \"description\": description,\n        }\n        const metaJson = JSON.stringify(meta, null, \"\\t\");\n        const metaEncoder = new TextEncoder();\n        const metaData = metaEncoder.encode(metaJson);\n        const ipfsNode = await getIpfsNode();\n        const { cid } = await ipfsNode.add(metaData)\n        const url = `ipfs://${cid.string}`;\n        nftMetaUrlParts = url.match(/.{1,64}/g);\n        nftMetaHash = await crypto.subtle.digest(\"SHA-256\", metaData);\n    }\n\n    const issuerKey = StellarSdk.Keypair.random();\n    const asset = new StellarSdk.Asset(code, issuerKey.publicKey());\n\n    const accountPublicKey = await wallet.getPublicKey();\n    const account = await (async () => {\n        try {\n            return await getConfig().horizonServer.loadAccount(accountPublicKey);\n        } catch {\n            throw new Error(`Your account ${accountPublicKey} does not exist on the Stellar ${getConfig().network} network. It must be created before it can be used to submit transactions.`);\n        }\n    })();\n    const fee = await getConfig().horizonServer.fetchBaseFee();\n\n    const transaction = new StellarSdk.TransactionBuilder(account, { fee, networkPassphrase: getConfig().networkPassphrase });\n    transaction.setTimeout(300);\n    transaction.addMemo(StellarSdk.Memo.text(`Create ${code} NFT âœ¨`));\n    transaction.addOperation(StellarSdk.Operation.beginSponsoringFutureReserves({ sponsoredId: issuerKey.publicKey() }));\n    transaction.addOperation(StellarSdk.Operation.createAccount({ destination: issuerKey.publicKey(), startingBalance: \"0\" }));\n    for (let i = 0; i < nftAssetUrlParts.length; i++) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.asset.url[${i}]`,\n            value: nftAssetUrlParts[i],\n        }));\n    }\n    if (nftAssetHash) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.asset.sha256`,\n            value: arrayBufferToHex(nftAssetHash),\n        }));\n    }\n    for (let i = 0; i < nftMetaUrlParts.length; i++) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.meta.url[${i}]`,\n            value: nftMetaUrlParts[i],\n        }));\n    }\n    if (nftMetaHash) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.meta.sha256`,\n            value: arrayBufferToHex(nftMetaHash),\n        }));\n    }\n    transaction.addOperation(StellarSdk.Operation.endSponsoringFutureReserves({ source: issuerKey.publicKey() }))\n    transaction.addOperation(StellarSdk.Operation.changeTrust({ asset: asset, limit: quantity }));\n    transaction.addOperation(StellarSdk.Operation.payment({ source: issuerKey.publicKey(), destination: accountPublicKey, asset: asset, amount: quantity }));\n    transaction.addOperation(StellarSdk.Operation.setOptions({ source: issuerKey.publicKey(), setFlags: StellarSdk.AuthImmutableFlag, masterWeight: 0, lowThreshold: 0, medThreshold: 0, highThreshold: 0 }));\n\n    const transactionBuilt = transaction.build();\n    transactionBuilt.sign(issuerKey);\n    const xdr = transactionBuilt.toEnvelope().toXDR('base64');\n    console.log(`Transaction built: ${xdr}`);\n\n    return { code, issuer: issuerKey.publicKey(), xdr };\n}\n\nasync function upload() {\n    const fileUpload = document.getElementById(\"file-upload\");\n\n    const fileLabel = document.getElementById(\"file-label\");\n    fileLabel.innerText = \"\";\n\n    const filePreviewGroup = document.getElementById(\"file-preview-group\");\n    const filePreview = document.getElementById(\"file-preview\");\n    while (filePreview.firstChild) {\n        filePreview.removeChild(filePreview.firstChild);\n    }\n    if (fileUpload.files.length > 0) {\n        const file = fileUpload.files[0];\n        const filename = fileUpload.value.replace(\"C:\\\\fakepath\\\\\", \"\");\n        const sizeKB = file.size / 1024;\n        fileLabel.innerText = `${filename} (${sizeKB} KB)`;\n\n        const fileUrl = window.URL.createObjectURL(file);\n        const preview = document.createElement(\"img\");\n        preview.src = fileUrl;\n        filePreview.appendChild(preview);\n        filePreviewGroup.classList.remove(\"d-none\");\n    } else {\n        filePreviewGroup.classList.add(\"d-none\");\n    }\n}\n","module.exports = function arrayBufferToHex (arrayBuffer) {\n  if (typeof arrayBuffer !== 'object' || arrayBuffer === null || typeof arrayBuffer.byteLength !== 'number') {\n    throw new TypeError('Expected input to be an ArrayBuffer')\n  }\n\n  var view = new Uint8Array(arrayBuffer)\n  var result = ''\n  var value\n\n  for (var i = 0; i < view.length; i++) {\n    value = view[i].toString(16)\n    result += (value.length === 1 ? '0' + value : value)\n  }\n\n  return result\n}\n","export function isConnected() {\n    return typeof window.rabet !== \"undefined\";\n}\n\nexport async function getPublicKey() {\n    const result = await window.rabet.connect();\n    return result.publicKey;\n}\n\nexport async function signTransaction(xdr, network) {\n    let rabetNetwork = undefined;\n    switch (network) {\n        case \"testnet\":\n            rabetNetwork = \"testnet\";\n            break;\n        case \"pubnet\":\n            rabetNetwork = \"mainnet\";\n            break;\n        default:\n            throw `Network '${network} unsupported by Rabet. Only pubnet and testnet are supported.`;\n    }\n    const result = await window.rabet.sign(xdr, rabetNetwork);\n    return result.xdr;\n}\n"],"names":["getConfig","network","document","getElementById","value","wrapErrorHandling","f","async","error","result","innerText","toString","classList","remove","add","resultError","removeAttribute","resultReset","init","walletButton","isConnected","window","setTimeout","console","log","open","create","setAttribute","code","issuer","xdr","build","signedXdr","_rabetJs","signTransaction","signedTransaction","TransactionBuilder","fromXDR","networkPassphrase","horizonServer","submitTransaction","html","innerHTML","resultSuccess","viewUrl","view","url","encodeURIComponent","upload","fileUpload","fileLabel","filePreviewGroup","filePreview","firstChild","removeChild","files","length","file","filename","replace","sizeKB","size","fileUrl","URL","createObjectURL","preview","createElement","src","appendChild","ipfsNode","getIpfsNode","_ipfsCore","quantity","description","nftAssetUrlParts","nftAssetHash","buffer","Promise","resolve","reject","reader","FileReader","onloadend","onerror","readAsArrayBuffer","cid","string","match","crypto","subtle","digest","nftMetaUrlParts","nftMetaHash","meta","metaJson","JSON","stringify","metaData","metaEncoder","TextEncoder","encode","issuerKey","Keypair","random","asset","Asset","publicKey","accountPublicKey","getPublicKey","account","loadAccount","Error","fee","fetchBaseFee","transaction","addMemo","Memo","text","addOperation","Operation","beginSponsoringFutureReserves","sponsoredId","createAccount","destination","startingBalance","i","manageData","source","name","endSponsoringFutureReserves","changeTrust","limit","payment","amount","setOptions","setFlags","AuthImmutableFlag","masterWeight","lowThreshold","medThreshold","highThreshold","transactionBuilt","sign","toEnvelope","toXDR","module","exports","arrayBuffer","byteLength","TypeError","Uint8Array","rabet","connect","rabetNetwork"],"version":3,"file":"index.233f6978.js.map"}