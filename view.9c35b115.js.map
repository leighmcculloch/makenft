{"mappings":"o1CAAMA,EAAAC,EAAA,eACAC,uBAAAD,EAAA,cACAE,EAAAF,EAAA,mBA+HqBG,EA5H3BC,QAAQC,IAAG,gBAEXC,OAAOC,MA0HoBJ,mBAvHvB,MAAMK,EAAMF,OAAOG,SAASC,KACtBC,EAAYH,EAAII,QAAQ,KAC9B,IAAkB,IAAdD,EACA,MAAM,IAAIE,MAAM,qCAEpB,MAEMC,EAFON,EAAIO,UAAUJ,EAAY,GAEhBK,MAAM,IAAK,GAClC,IAAIC,EACAC,EACJ,GAAwB,GAApBJ,EAAUK,OACVF,EAAU,SACVC,EAAQJ,EAAU,OACf,CAAA,GAAwB,GAApBA,EAAUK,OAIjB,MAAM,IAAIN,MAAM,8BAHhBI,EAAUH,EAAU,GACpBI,EAAQJ,EAAU,GAKtB,MAAMM,EAAaF,EAAMF,MAAM,IAAK,GACpC,GAA0B,IAAtBI,EAAWD,OACX,MAAM,IAAIN,MAAM,8BAEpB,MAAMQ,EAAOD,EAAW,GAClBE,EAASF,EAAW,GAEpBG,EAAMrB,EAAOsB,UAAUP,GAEvBQ,QAAgBF,EAAIG,cAAcC,YAAYL,GAEpD,IAAIM,EAAc,GAClB,IAAK,IAAIC,EAAI,GAAKA,IAAK,CACnB,MAAMC,EAAQL,EAAQM,UAAS,iBAAkBF,MACjD,QAAqB,IAAVC,EACP,MAEJF,GAAeI,KAAKF,GAExB,IAAIG,EAAkBL,EAClBA,EAAYM,WAAW,aACvBD,EAAkBV,EAAIY,QAAQP,EAAYb,UAAU,KAExD,MAAMqB,EAAY,MACd,MAAMC,EAASZ,EAAQM,UAAS,oBAChC,OAAIM,EACOL,KAAKK,GAET,MALO,GAQlB,IAAIC,EAAa,GACjB,IAAK,IAAIC,EAAI,GAAKA,IAAK,CACnB,MAAMT,EAAQL,EAAQM,UAAS,gBAAiBQ,MAChD,QAAqB,IAAVT,EACP,MAEJQ,GAAcN,KAAKF,GAEvB,IAAIU,EAAiBZ,EACjBU,EAAWJ,WAAW,aACtBM,EAAiBjB,EAAIY,QAAQG,EAAWvB,UAAU,KAEtD,MAAM0B,EAAW,MACb,MAAMJ,EAASZ,EAAQM,UAAS,mBAChC,OAAIM,EACOL,KAAKK,GAET,MALM,GAQjBK,SAASC,eAAe,QAAQC,UAAYvB,EAC5C,MAAMwB,EAAUH,SAASI,cAAc,OACvCD,EAAQE,IAAMd,EACd,MAAMe,EAAcN,SAASC,eAAe,qBACrCK,EAAYC,YACfD,EAAYE,YAAYF,EAAYC,YAExCD,EAAYG,YAAYN,GAExB,IAAIO,EAAI,mBACenB,MAAoBL,YA2D3ByB,EA1DZjB,IACAgB,GAAc,cACDhB,KAwDDiB,EAtDLD,EAuDIV,SAASC,eAAe,eAChCW,UAAYD,EAtDnB,IAAIE,EAAO,GAQX,GAPmB,KAAfjB,IACAiB,GAAI,kBAAsBf,MAAmBF,SAE7CG,IACAc,GAAc,cACDd,KAEE,KAAfH,GAAqBA,EAAWJ,WAAW,WAAY,CACvD,MAAMsB,EAAalB,EAAWvB,UAAU,GAElC0C,0BA0DV,OAAiB,OAAbC,IAGJA,QAAiBzD,EAAS0D,UAFfD,EA5DgBE,IACCC,IAAIL,GAC5B,IAAIM,EAAc,GAClB,UAAW,MAAMC,KAASN,EACtBK,GAAeC,EAAMC,WAEzB,MAAMC,EAAcC,KAAKC,MAAML,aA8CfT,GACLX,SAASC,eAAe,oBAChCW,UAAYD,EA9Cfe,CADkB,GAAMF,KAAKG,UAAUJ,EAAa,KAAM,SAGjD,KAATV,YAqCYF,GACDX,SAASC,eAAe,eAChCW,UAAYD,EAtCfiB,CAAWf,YA0BIF,GACJX,SAASC,eAAe,UAChCW,UAAYD,EAzBnBkB,CAAa,sBACahD,EAAIiD,iBAAiBnD,EAAMC,gGACZC,EAAIkD,wBAAwBpD,EAAMC,2GACbC,EAAImD,YAAYrD,EAAMC,oDAK9EqD,UACF,UACUxE,IACR,MAAOyE,GAEL,eAKSA,GACFlC,SAASC,eAAe,UAChCC,UAAYgC,EAAMZ,WARjBa,CAAYD,EAAMA,OAASA,GACrBA,KA8BlB,IAAIlB,EAAW","sources":["src/view.js"],"sourcesContent":["import StellarSdk from 'stellar-sdk';\nimport * as ipfsCore from 'ipfs-core';\nimport * as config from './config.js';\n\nconst version = `${process.env.VERSION || \"dev\"}`;\nconsole.log(`Version: ${version}`);\n\nwindow.init = wrapErrorHandling(init);\n\nasync function init() {\n    const url = window.location.href;\n    const hashIndex = url.indexOf(\"#\");\n    if (hashIndex === -1) {\n        throw new Error(\"NFT not specified in web address.\")\n    }\n    const hash = url.substring(hashIndex + 1);\n\n    const hashParts = hash.split(\":\", 2);\n    let network = undefined;\n    let asset = undefined;\n    if (hashParts.length == 1) {\n        network = \"pubnet\";\n        asset = hashParts[0];\n    } else if (hashParts.length == 2) {\n        network = hashParts[0];\n        asset = hashParts[1];\n    } else {\n        throw new Error(\"NFT web address malformed.\")\n    }\n\n    const assetParts = asset.split(\"-\", 2);\n    if (assetParts.length !== 2) {\n        throw new Error(\"NFT web address malformed.\")\n    }\n    const code = assetParts[0];\n    const issuer = assetParts[1];\n\n    const cfg = config.getConfig(network);\n\n    const account = await cfg.horizonServer.loadAccount(issuer);\n\n    let nftAssetUrl = \"\";\n    for (let i = 0; ; i++) {\n        const value = account.data_attr[`nft.asset.url[${i}]`];\n        if (typeof value === \"undefined\") {\n            break;\n        }\n        nftAssetUrl += atob(value);\n    }\n    let nftAssetUrlLink = nftAssetUrl;\n    if (nftAssetUrl.startsWith(\"ipfs://\")) {\n        nftAssetUrlLink = cfg.ipfsUrl(nftAssetUrl.substring(7));\n    }\n    const nftAssetHash = (() => {\n        const sha256 = account.data_attr[`nft.asset.sha256`];\n        if (sha256) {\n            return atob(sha256);\n        }\n        return null;\n    })();\n\n    let nftMetaUrl = \"\";\n    for (let i = 0; ; i++) {\n        const value = account.data_attr[`nft.meta.url[${i}]`];\n        if (typeof value === \"undefined\") {\n            break;\n        }\n        nftMetaUrl += atob(value);\n    }\n    let nftMetaUrlLink = nftAssetUrl;\n    if (nftMetaUrl.startsWith(\"ipfs://\")) {\n        nftMetaUrlLink = cfg.ipfsUrl(nftMetaUrl.substring(7));\n    }\n    const nftMetaHash = (() => {\n        const sha256 = account.data_attr[`nft.meta.sha256`];\n        if (sha256) {\n            return atob(sha256);\n        }\n        return null;\n    })();\n\n    document.getElementById(\"code\").innerText = code;\n    const preview = document.createElement(\"img\");\n    preview.src = nftAssetUrlLink;\n    const filePreview = document.getElementById(\"file-preview\");\n    while (filePreview.firstChild) {\n        filePreview.removeChild(filePreview.firstChild);\n    }\n    filePreview.appendChild(preview);\n\n    let text =\n        `Asset: <a href=\"${nftAssetUrlLink}\">${nftAssetUrl}</a>`;\n    if (nftAssetHash) {\n        text += `<br/>` +\n            `Hash: ${nftAssetHash}`;\n    }\n    resultData(text);\n\n    let meta = \"\";\n    if (nftMetaUrl !== \"\") {\n        meta += `Meta: <a href=\"${nftMetaUrlLink}\">${nftMetaUrl}</a>`;\n    }\n    if (nftMetaHash) {\n        meta += `<br/>` +\n            `Hash: ${nftMetaHash}`;\n    }\n    if (nftMetaUrl !== \"\" && nftMetaUrl.startsWith(\"ipfs://\")) {\n        const nftMetaCid = nftMetaUrl.substring(7);\n        const ipfsNode = await getIpfsNode();\n        const stream = ipfsNode.cat(nftMetaCid);\n        let nftMetaData = \"\";\n        for await (const chunk of stream) {\n            nftMetaData += chunk.toString()\n        }\n        const nftMetaJson = JSON.parse(nftMetaData);\n        const metaJsonHtml = `${JSON.stringify(nftMetaJson, null, \"  \")}`;\n        resultMetaJson(metaJsonHtml);\n    }\n    if (meta !== \"\") {\n        resultMeta(meta);\n    }\n\n    resultSuccess(\n        `View on a <a href=\"${cfg.explorerAssetUrl(code, issuer)}\" target=\"_blank\" rel=\"noopener\">block explorer</a>.</br>` +\n        `See the current owner(s) <a href=\"${cfg.explorerAssetHoldersUrl(code, issuer)}\" target=\"_blank\" rel=\"noopener\">here</a>.</br>` +\n        `Make an offer to buy or sell this NFT using a <a href=\"${cfg.dexAssetUrl(code, issuer)}\" target=\"_blank\" rel=\"noopener\">DEX app</a>.`\n    );\n}\n\nfunction wrapErrorHandling(f) {\n    return async () => {\n        try {\n            await f();\n        } catch (error) {\n            resultError(error.error || error);\n            throw error;\n        }\n    };\n}\n\nfunction resultError(error) {\n    const result = document.getElementById(\"result\");\n    result.innerText = error.toString();\n}\n\nfunction resultSuccess(html) {\n    const result = document.getElementById(\"result\");\n    result.innerHTML = html;\n}\n\nfunction resultData(html) {\n    const result = document.getElementById(\"result-data\");\n    result.innerHTML = html;\n}\n\nfunction resultMeta(html) {\n    const result = document.getElementById(\"result-meta\");\n    result.innerHTML = html;\n}\n\nfunction resultMetaJson(html) {\n    const result = document.getElementById(\"result-meta-json\");\n    result.innerHTML = html;\n}\n\nlet ipfsNode = null;\nasync function getIpfsNode() {\n    if (ipfsNode !== null) {\n        return ipfsNode;\n    }\n    ipfsNode = await ipfsCore.create();\n    return ipfsNode;\n}\n"],"names":["_stellarSdk","require","_ipfsCore","_configJs","f","console","log","window","init","url","location","href","hashIndex","indexOf","Error","hashParts","substring","split","network","asset","length","assetParts","code","issuer","cfg","getConfig","account","horizonServer","loadAccount","nftAssetUrl","i","value","data_attr","atob","nftAssetUrlLink","startsWith","ipfsUrl","nftAssetHash","sha256","nftMetaUrl","i1","nftMetaUrlLink","nftMetaHash","document","getElementById","innerText","preview","createElement","src","filePreview","firstChild","removeChild","appendChild","text","html","innerHTML","meta","nftMetaCid","stream","ipfsNode","create","getIpfsNode","cat","nftMetaData","chunk","toString","nftMetaJson","JSON","parse","resultMetaJson","stringify","resultMeta","resultSuccess","explorerAssetUrl","explorerAssetHoldersUrl","dexAssetUrl","async","error","resultError"],"version":3,"file":"view.9c35b115.js.map"}