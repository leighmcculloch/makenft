{"mappings":"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","sources":["src/index.js","node_modules/array-buffer-to-hex/index.js","src/rabet.js"],"sourcesContent":["import StellarSdk from 'stellar-sdk';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport * as ipfsCore from 'ipfs-core';\nimport * as wallet from './rabet.js';\nimport * as config from './config.js';\n\nconst version = `${process.env.VERSION || \"dev\"}`;\nconsole.log(`Version: ${version}`);\n\nfunction getConfig() {\n    const network = document.getElementById(\"network\").value;\n    return config.getConfig(network);\n}\n\nwindow.init = wrapErrorHandling(init);\nwindow.add = wrapErrorHandling(add);\nwindow.create = wrapErrorHandling(create);\nwindow.view = wrapErrorHandling(view);\nwindow.upload = wrapErrorHandling(upload);\n\nfunction wrapErrorHandling(f) {\n    return async () => {\n        try {\n            await f();\n        } catch (error) {\n            resultError(error.error || error);\n            document.getElementById(\"create-button\").removeAttribute(\"disabled\");\n            document.getElementById(\"view-button\").removeAttribute(\"disabled\");\n            throw error;\n        }\n    };\n}\n\nfunction resultReset() {\n    const result = document.getElementById(\"result\");\n    result.innerText = \"\";\n    result.classList.add(\"d-none\");\n}\n\nfunction resultError(error) {\n    const result = document.getElementById(\"result\");\n    result.innerText = error.toString();\n    result.classList.remove(\"d-none\");\n    result.classList.remove(\"alert-success\");\n    result.classList.add(\"alert-danger\");\n}\n\nfunction resultSuccess(html) {\n    const result = document.getElementById(\"result\");\n    result.innerHTML = html;\n    result.classList.remove(\"d-none\");\n    result.classList.remove(\"alert-danger\");\n    result.classList.add(\"alert-success\");\n}\n\nasync function init() {\n    const walletButton = document.getElementById(\"wallet-button\");\n    if (wallet.isConnected()) {\n        walletButton.classList.add(\"d-none\");\n        document.getElementById(\"create-button\").classList.add(\"d-block\");\n        document.getElementById(\"view-button\").classList.add(\"d-block\");\n    } else {\n        walletButton.innerText = \"Add the Rabet extension to Chrome\";\n        window.setTimeout(init, 500);\n    }\n}\n\nasync function add() {\n    init();\n    if (!wallet.isConnected()) {\n        window.open(\"https://rabet.io\", \"_blank\", \"noopener\");\n    }\n}\n\nasync function create() {\n    resultReset();\n    document.getElementById(\"create-button\").setAttribute(\"disabled\", \"disabled\");\n    document.getElementById(\"view-button\").setAttribute(\"disabled\", \"disabled\");\n\n    const { code, issuer, xdr } = await build();\n    const signedXdr = await wallet.signTransaction(xdr, getConfig().network);\n    console.log(`Transaction signed: ${signedXdr}`);\n    const signedTransaction = StellarSdk.TransactionBuilder.fromXDR(signedXdr, getConfig().networkPassphrase);\n    const result = await getConfig().horizonServer.submitTransaction(signedTransaction);\n    console.log(result);\n    resultSuccess(`ðŸŽ‰ View your NFT <a href=\"${getConfig().viewUrl(code, issuer)}\">here</a>.`);\n\n    document.getElementById(\"create-button\").removeAttribute(\"disabled\");\n    document.getElementById(\"view-button\").removeAttribute(\"disabled\");\n}\n\nasync function view() {\n    resultReset();\n    document.getElementById(\"create-button\").setAttribute(\"disabled\", \"disabled\");\n    document.getElementById(\"view-button\").setAttribute(\"disabled\", \"disabled\");\n\n    const { xdr } = await build();\n    const url = `https://laboratory.stellar.org/#xdr-viewer?type=TransactionEnvelope&input=${encodeURIComponent(xdr)}`;\n    window.open(url, \"_blank\", \"noopener\");\n\n    document.getElementById(\"create-button\").removeAttribute(\"disabled\");\n    document.getElementById(\"view-button\").removeAttribute(\"disabled\");\n}\n\nlet ipfsNode = null;\nasync function getIpfsNode() {\n    if (ipfsNode !== null) {\n        return ipfsNode;\n    }\n    ipfsNode = await ipfsCore.create();\n    return ipfsNode;\n}\n\nasync function build() {\n    const code = document.getElementById(\"code\").value;\n    const quantity = document.getElementById(\"quantity\").value;\n    const fileUpload = document.getElementById(\"file-upload\");\n    const description = document.getElementById(\"description\").value;\n\n    let nftAssetUrlParts = [];\n    let nftAssetHash = null;\n    if (fileUpload.files.length > 0) {\n        const file = fileUpload.files[0];\n        const buffer = await new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.onerror = (error) => reject(error);\n            reader.readAsArrayBuffer(file);\n        });\n        const ipfsNode = await getIpfsNode();\n        const { cid } = await ipfsNode.add(buffer)\n        const url = `ipfs://${cid.string}`;\n        nftAssetUrlParts = url.match(/.{1,64}/g);\n        nftAssetHash = await crypto.subtle.digest(\"SHA-256\", buffer);\n    }\n\n    let nftMetaUrlParts = null;\n    let nftMetaHash = null;\n    if (description.length > 0) {\n        const meta = {\n            \"description\": description,\n        }\n        const metaJson = JSON.stringify(meta, null, \"\\t\");\n        const metaEncoder = new TextEncoder();\n        const metaData = metaEncoder.encode(metaJson);\n        const ipfsNode = await getIpfsNode();\n        const { cid } = await ipfsNode.add(metaData)\n        const url = `ipfs://${cid.string}`;\n        nftMetaUrlParts = url.match(/.{1,64}/g);\n        nftMetaHash = await crypto.subtle.digest(\"SHA-256\", metaData);\n    }\n\n    const issuerKey = StellarSdk.Keypair.random();\n    const asset = new StellarSdk.Asset(code, issuerKey.publicKey());\n\n    const accountPublicKey = await wallet.getPublicKey();\n    const account = await (async () => {\n        try {\n            return await getConfig().horizonServer.loadAccount(accountPublicKey);\n        } catch {\n            throw new Error(`Your account ${accountPublicKey} does not exist on the Stellar ${getConfig().network} network. It must be created before it can be used to submit transactions.`);\n        }\n    })();\n    const fee = await getConfig().horizonServer.fetchBaseFee();\n\n    const transaction = new StellarSdk.TransactionBuilder(account, { fee, networkPassphrase: getConfig().networkPassphrase });\n    transaction.setTimeout(300);\n    transaction.addMemo(StellarSdk.Memo.text(`Create ${code} NFT âœ¨`));\n    transaction.addOperation(StellarSdk.Operation.beginSponsoringFutureReserves({ sponsoredId: issuerKey.publicKey() }));\n    transaction.addOperation(StellarSdk.Operation.createAccount({ destination: issuerKey.publicKey(), startingBalance: \"0\" }));\n    for (let i = 0; i < nftAssetUrlParts.length; i++) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.asset.url[${i}]`,\n            value: nftAssetUrlParts[i],\n        }));\n    }\n    if (nftAssetHash) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.asset.sha256`,\n            value: arrayBufferToHex(nftAssetHash),\n        }));\n    }\n    for (let i = 0; i < nftMetaUrlParts.length; i++) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.meta.url[${i}]`,\n            value: nftMetaUrlParts[i],\n        }));\n    }\n    if (nftMetaHash) {\n        transaction.addOperation(StellarSdk.Operation.manageData({\n            source: issuerKey.publicKey(),\n            name: `nft.meta.sha256`,\n            value: arrayBufferToHex(nftMetaHash),\n        }));\n    }\n    transaction.addOperation(StellarSdk.Operation.endSponsoringFutureReserves({ source: issuerKey.publicKey() }))\n    transaction.addOperation(StellarSdk.Operation.changeTrust({ asset: asset, limit: quantity }));\n    transaction.addOperation(StellarSdk.Operation.payment({ source: issuerKey.publicKey(), destination: accountPublicKey, asset: asset, amount: quantity }));\n    transaction.addOperation(StellarSdk.Operation.setOptions({ source: issuerKey.publicKey(), setFlags: StellarSdk.AuthImmutableFlag, masterWeight: 0, lowThreshold: 0, medThreshold: 0, highThreshold: 0 }));\n\n    const transactionBuilt = transaction.build();\n    transactionBuilt.sign(issuerKey);\n    const xdr = transactionBuilt.toEnvelope().toXDR('base64');\n    console.log(`Transaction built: ${xdr}`);\n\n    return { code, issuer: issuerKey.publicKey(), xdr };\n}\n\nasync function upload() {\n    const fileUpload = document.getElementById(\"file-upload\");\n\n    const fileLabel = document.getElementById(\"file-label\");\n    fileLabel.innerText = \"\";\n\n    const filePreviewGroup = document.getElementById(\"file-preview-group\");\n    const filePreview = document.getElementById(\"file-preview\");\n    while (filePreview.firstChild) {\n        filePreview.removeChild(filePreview.firstChild);\n    }\n    if (fileUpload.files.length > 0) {\n        const file = fileUpload.files[0];\n        const filename = fileUpload.value.replace(\"C:\\\\fakepath\\\\\", \"\");\n        const sizeKB = file.size / 1024;\n        fileLabel.innerText = `${filename} (${sizeKB} KB)`;\n\n        const fileUrl = window.URL.createObjectURL(file);\n        const preview = document.createElement(\"img\");\n        preview.src = fileUrl;\n        filePreview.appendChild(preview);\n        filePreviewGroup.classList.remove(\"d-none\");\n    } else {\n        filePreviewGroup.classList.add(\"d-none\");\n    }\n}\n\ninit();\n","module.exports = function arrayBufferToHex (arrayBuffer) {\n  if (typeof arrayBuffer !== 'object' || arrayBuffer === null || typeof arrayBuffer.byteLength !== 'number') {\n    throw new TypeError('Expected input to be an ArrayBuffer')\n  }\n\n  var view = new Uint8Array(arrayBuffer)\n  var result = ''\n  var value\n\n  for (var i = 0; i < view.length; i++) {\n    value = view[i].toString(16)\n    result += (value.length === 1 ? '0' + value : value)\n  }\n\n  return result\n}\n","export function isConnected() {\n    return typeof window.rabet !== \"undefined\";\n}\n\nexport async function getPublicKey() {\n    const result = await window.rabet.connect();\n    return result.publicKey;\n}\n\nexport async function signTransaction(xdr, network) {\n    let rabetNetwork = undefined;\n    switch (network) {\n        case \"testnet\":\n            rabetNetwork = \"testnet\";\n            break;\n        case \"pubnet\":\n            rabetNetwork = \"mainnet\";\n            break;\n        default:\n            throw `Network '${network} unsupported by Rabet. Only pubnet and testnet are supported.`;\n    }\n    const result = await window.rabet.sign(xdr, rabetNetwork);\n    return result.xdr;\n}\n"],"names":["_stellarSdk","require","_arrayBufferToHex","_ipfsCore","_rabetJs","_configJs","getConfig","network","document","getElementById","value","wrapErrorHandling","f","async","error","result","innerText","toString","classList","remove","add","resultError","removeAttribute","resultReset","init","walletButton","isConnected","window","setTimeout","console","log","open","create","setAttribute","code","issuer","xdr","build","signedXdr","signTransaction","signedTransaction","_stellarSdkDefault","default","TransactionBuilder","fromXDR","networkPassphrase","horizonServer","submitTransaction","html","innerHTML","resultSuccess","viewUrl","view","url","encodeURIComponent","upload","fileUpload","fileLabel","filePreviewGroup","filePreview","firstChild","removeChild","files","length","file","filename","replace","sizeKB","size","fileUrl","URL","createObjectURL","preview","createElement","src","appendChild","ipfsNode","getIpfsNode","quantity","description","nftAssetUrlParts","nftAssetHash","buffer","Promise","resolve","reject","reader","FileReader","onloadend","onerror","readAsArrayBuffer","ipfsNode1","cid","string","match","crypto","subtle","digest","nftMetaUrlParts","nftMetaHash","meta","metaJson","JSON","stringify","metaData","TextEncoder","encode","ipfsNode2","issuerKey","Keypair","random","asset","Asset","publicKey","accountPublicKey","getPublicKey","account","loadAccount","Error","fee","fetchBaseFee","transaction","addMemo","Memo","text","addOperation","Operation","beginSponsoringFutureReserves","sponsoredId","createAccount","destination","startingBalance","i","manageData","source","name","_arrayBufferToHexDefault","i1","endSponsoringFutureReserves","changeTrust","limit","payment","amount","setOptions","setFlags","AuthImmutableFlag","masterWeight","lowThreshold","medThreshold","highThreshold","transactionBuilt","sign","toEnvelope","toXDR","module","exports","arrayBuffer","byteLength","TypeError","Uint8Array","rabet","connect","rabetNetwork"],"version":3,"file":"index.dc45804c.js.map"}